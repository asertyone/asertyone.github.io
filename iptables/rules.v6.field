# Initially generated by ip6tables-save v1.4.21

### FILTER table ###
*filter

# Use DROP policy for INPUT, FORWARD and OUTPUT chain
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

# Allow all traffic from loopback interface
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT

# Allow traffic on already established connections
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT


# Allow DNS requests (and incoming replies, via related / established rules)
-A INPUT ! -i rmnet+ -p udp -m udp --dport 53 -j ACCEPT
-A OUTPUT -o rmnet+ -p udp -m udp --dport 53 -j ACCEPT
-A OUTPUT -o rmnet+ -p tcp -m tcp --dport 53 -j ACCEPT

# Note: the DNS Resolver is not used on IPv6

# Note: DHCP is only for IPv4, see ICMPv6 rules instead


# Allow relevant ICMPv6 types. See RFC 4890:
# - section 4.3 "Recommendations for ICMPv6 Transit Traffic"
# - and section 4.4 "Recommendations for ICMPv6 Local Configuration Traffic".
# See also https://www.iana.org/assignments/icmpv6-parameters/icmpv6-parameters.xhtml

# ICMPv6 Connectivity checking messages
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type echo-request -j ACCEPT
-A FORWARD -p ipv6-icmp -m icmp6 --icmpv6-type echo-request -j ACCEPT
-A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type echo-request -j ACCEPT

# ICMPv6 Error messages
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type destination-unreachable -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type packet-too-big -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type time-exceeded -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type parameter-problem -j ACCEPT

# ICMPv6 Address Configuration and Router Selection messages
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type router-solicitation -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type router-advertisement -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type neighbour-solicitation -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type neighbour-advertisement -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type redirect -j ACCEPT
-A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type router-solicitation -j ACCEPT
-A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type router-advertisement -j ACCEPT
-A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type neighbour-solicitation -j ACCEPT
-A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type neighbour-advertisement -j ACCEPT
-A OUTPUT -p ipv6-icmp -m icmp6 --icmpv6-type redirect -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 141 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 142 -j ACCEPT

# ICMPv6 SEND Certificate Path notification messages
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 148 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 149 -j ACCEPT

# ICMPv6 Link-local multicast receiver notification messages
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 130 -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 131 -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 132 -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 143 -s fe80::/10 -j ACCEPT

# ICMPv6 Multicast Router Discovery messages
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 151 -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 152 -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -m icmp6 --icmpv6-type 153 -s fe80::/10 -j ACCEPT


# [SW Update Domain] Allow HTTP protocol over TLS/SSL (i.e., HTTPS).
# The needed rules, with specific IP address and port, will be added
# dynamically at run time by Connectivity components through the
# appropriate APNs (the association of each APN to rmnetX may vary).
# For the time being, use these static rules (though not explicitly requested
# by SW update domain for IPv6).
# Note: rules for port 80 have not been explicitly requested by any team and
# should probably be removed (unless Legato or other third-party services need them).
-A OUTPUT -o rmnet+ -p tcp -m tcp --dport 443 -j ACCEPT
#-A FORWARD -p tcp -m tcp --dport 443 -j ACCEPT
#-A FORWARD -p tcp -m tcp --sport 443 -j ACCEPT
#-A OUTPUT -p tcp -m tcp --sport 80 -j ACCEPT
#-A FORWARD -p tcp -m tcp --dport 80 -j ACCEPT
#-A FORWARD -p tcp -m tcp --sport 80 -j ACCEPT


# Create more custom rules here, e.g.:
# Allow incoming TCP connections for service port <port> on interface <if>
# -A INPUT -i <if> -p tcp -m tcp --dport <port> -j ACCEPT

COMMIT


# NAT rules
# (currently none for IPv6)
